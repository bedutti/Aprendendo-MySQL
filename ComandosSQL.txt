No Query 1 você digita os comandos: depois dos comandos é necessário executar no raiozinho

Em banco de dados entre aspas simples significa dados '' e entre crases são campos ``

O comando só termina no ponto e virgula. Posso dar quantos enters e espaços quiser.

create database cadastro;   //criar o banco de dados

use cadastro;               //abre o banco de dados para poder criar a tabela

create table pessoas (      //criar a tabela pessoas
    nome varchar(30),       //30 espaços
    idade tinyint(3),       //3 espaços
    sexo char(1),           //uma letra
    peso float,
    altura float,
    nacionalidade varchar(20)
);

describe pessoas;           //mostra as informações da tabela
show databases;             //mostra os bancos existentes
show tables;                //mostra as tabelas do banco de dados atual

drop database cadastro;     //deletando o banco de dados

create database cadastro                //criar um banco de dados
default character set utf8              //com charset utf8
default collate utf8_general_ci;

create table pessoas(
    id int not null auto_increment,                 //id para ser a chave primária
	nome varchar(30) not null ,
    nascimento date,
    sexo enum('M','F'),                             //duas opções M e F
    peso decimal(5,2),                              //5 = total de digitos | 2 = números após d vírgula 123,45
    altura decial(3,2),                             //3 = total de digita  | 2 = números após a vírgula 1,57
    nacionalidade varchar(20) default 'Brasil',     //cria com um padrão Brasil
    primary key (id)                                //cria a chave primária utilizando o campo id
) default charset = utf8;                           //cria com o utf8

insert into pessoas                                 //inserir dados NA tabela pessoas
(nome, nascimento, sexo, peso, altura)              //esses são os campos
values                                              //valores
('Godofredo', '1987-01-02', 'M', '78.5', '1.83');   //esses são os dados

se os dados estiverem na mesma ordem dos campos na tabela, podemos omitir os campos:

insert into pessoas values
(default, 'Creuza', '1920-12-30', 'F', '50.2', '1.65', default);

podemos colocar varias pessoas ao mesmo tempo:

insert into pessoas
(nome, nascimento, sexo, peso, altura, nacionalidade)        
values                                           
('Ana', '1975-12-22', 'F', '52.3', '1.45', 'EUA'),
('Pedro', '2000-07-15', 'M', '52.3', '1.70', 'Portugal');

alter table pessoas                     //alterar tabela
add column profissao varchar(10);       //adiciona coluna no final da tabela

alter table pessoas
drop column profissao;                  //remove a coluna

alter table pessoas
add column profissao varchar(10) after nome;    //ou apenas first que ele vira o primeiro

alter table pessoas
modify column profissao varchar(20);        //para alterar as constrains

alter table pessoas
change column profissao prof varchar(20);   //para mudar o nome de uma coluna

alter table pessoas
rename to gafanhotos;                       //para mudar o nome da tabela

create table if not exists cursos(          //só cria se já não existir

) default charset = utf8

alter table cursos
add column idcurso int first;

alter table cursos
add primary key (idcurso);

drop table cursos;      //apaga a tabela

update cursos		//atualiza um dado de um registro
set nome = 'HTML'
where idcursos = '1';

update cursos
set nome 'PHP', ano = '2015'

update cursos
set nome = 'JAVA', carga = '40', ano = '2015'
where idcurso = '5'
limit 1;					//limita a ação do update, apenas permite a alteração de 1 registro.

delete from cursos
where idcurso = '10';				//deleta da tabela curso onde o idcurso for 10

truncate table cursos;				//apaga todos os registros da tabela cursos.

Gerenciar cópias de segurança:

Pra fazer uma cópia de segurança tem que usar o Workbench > Server > Data Export.
Fazer um backup de um banco de daods se chama DUMP
Include Create Schema = Permite que ao abrir o dump, ele já crie o banco de dados automaticamente.

Você pode abrir o arquivo criado com um editor de texto simples e ver que ele armazena os comandos SQL para refazer completamente seu banco de dados.

Para usar o backup entre no Workbench > Server > Data Import

show create table amigos;	//mostra o comando usado para criar a tabela amigos.

select * from tabela;	//seleciona todos os registros de todas as colunas da tabela tabela.

parâmetros para o select:

order by coluna;			//devolve o resultado na ordem da coluna selecionada.
order by coluna desc;			//ordem decrescente
order by coluna asc;			//ordem crescente, se for crescente pode colucar nada.

select nome, carga, ano from cursos	//seleciona as colunas escolhidas da tabela curso, as colunas vêm na ordem que você colocá-las
order by nome;				//ordenado pelo nome. pode colocar quantas colunas quiser para ir ordenando.

select nome, carga, ano from cursos
order by ano, nome, carga;		//ele organiza por ano, depois nome e depois carga.

select * from cursos			//seleciona tudo da tabela cursos
where ano = '2016'			//apenas os registros que possuem ano = a 2016
order by nome;				//ordenado pelo nome.

no "where" podemos usar:
<, >, <=, >=, =, != (diferente), <> (diferente), between 2014 and 2016 (incluindo ambos), in (2014, 2016) (inclui o que você colocar), pode colocar varias espressões entre and e or, like (parecido)


select nome from cursos
where ano between 2014 and 2016;	//seleciona tudo entre os numeros incluindo eles

select nome from cursos
where ano in (2013, 2015, 2018);	//seleciona apenas o que foi colocado.

select nome from cursos
where carga > 35 and totaulas < 30;	//junta duas condições para o where.

select nome from cursos
where carga >35 or totaulas <20		//opciona as duas opções.

select nome from cursos
where nome like 'p%';			//like busca semelhanças, nesse caso onde começa com P. Não é case sensitive

select nome from cursos
where nome like '%p%'			//qualquer nome que tenha a letra p em qualquer posição.

select nome from cursos
where nome not like '%a%';		//seleciona qualquer nome que não tenha a letra a em nenhum lugar

select * from cursos
where nome like 'ph%p%';		//seleciona tudo da tabela cursos onde o nome comece com ph, tenha algo ou nada no meio, tenha um p e termine com qualquer coisa.

wildcards:

% = qualquer caractere incluindo nada.
_ = obrigatoriamente tenha UM caractere (exclui o nada) inlui espaço. (colocar um underline por caractere que você queira)

select distinct carga from cursos;	//retorna apenas os registros unicos, por exemplo, existem varias ocorrencias iguais no campo cursos, ele retornará apenas os valores unicos, sem repetição (registros: 40, 30, 40, 20, 40, 10, 20) -> (resultado: 40, 30, 20, 10).

select count(*) from cursos		//conta quantos registros da tabela cursos
where carga > 40;			//tema carga acima de 40.

select max(carga) from cursos;		//seleciona qual é o registro com maior carga entre os cursos.

select min(carga) from cursos;		//seleciona o menor.

select max(totaulas) from cursos
where ano = '2016';			//qual o maximo de aulas tiveram as aulas de 2016.

select nome, min(totaulas) from cursos
where ano = '2016';			//retorna o nome e o minimo de aulas dos cursos de 2016. Apena do primeiro registro que aparecer. Se houverem mais de um registro com o minimo de aulas ele so mostrará o primeiro.

select sum(totaulas) from cursos
where ano = '2016';			//soma o campo totaulas de todos os registros no ano de 2016.

select avg(totaulas) from cursos
where ano = 2016;			//tira a media de aulas de todos os registros no ano de 2016.

select carga from cursos
group by carga;				//seleciona a carga agrupada pela carga, valores repetidos de carga não aparecerão na lista

select carga, count(carga) from cursos
group by carga;				//seleciona a coluna carga e mostra quantos elementos têm em cada agrupamento.

select carga, count(carga) from cursos
group by carga
order by count(carga) desc;		//ordena da carga da que tem maior quantidade de repetições para a que tem menor.

select carga, count(*) from cursos
where totaulas = 30
group by carga;				//mostra quais as cargas e quantas repetições cada tem onde o total de aulas seja igual a 30.

select carga, count(nome) from cursos
group by carga
having count(nome) > 3;			//retorna as cargas e a quantidade de cada, mostrando apenas as que tiverem uma contagem maior que 3.

select ano, count(*) from cursos	//seleciona ano e a contagem dos anos
group by ano				//agrupados por ano
having count(*) >= 5			//onde a contagem seja maior ou igual a 5
order by count(*);			//ordenado pela contagem

select carga, count(*) from cursos			//seleciona a carga e a contagem
where ano > 2015					//onde o ano for maior que 2015
group by carga						//agrupado pela carga
having carga > (select avg(carga) from cursos);		//onde a carga for maior que a media de carga de todos os cursos.

Criando relacionamentos: (Usar a enfine InnoDB)

No exercício o Guanabara fez o relacionamento PREFERE, um gafanhoto prefere UM curso, Um curso pode ser preferido por MUITOS gafanhotos
A regra é levar o id primário do um para o lado do muitos

alter table gafanhotos
add column cursopreferido int;		//adicionando um campo "cursopreferido" na tabela gafanhotos (lado muitos) tem que ser o mesmo tipo da chave primária da tabela cursos

alter table gafanhotos
add foreign key(cursopreferido)
references cursos(idcurso);		//cria a chave estrangeira ligada a chave primária idcurso da tabela cursos

se houver relação entre tabelas, é impossível apagar cursos que estejam em outras tabelas, pois as tabelas precisam ter consistência
eu também não posso adicionar cursos que não existem como preferencias ao gafanhotos

Fica claro que na tabela gafanhotos apenas a id do curso é guardada na tabela, então tempos que usar junções.

select gafanhotos.nome, cursos.nome, cursos.ano 	//seleciono campos de duas tabelas diferentes
from gafanhotos join cursos				//juntos as tabelas que eu quero
on gafanhotos.cursopreferido = cursos.idcurso;		//indico qual a relação entre as tabelas, o join mostra apenas os resultados que possuem relações

join ou inner join mostrará apenas registros que possuem relação.
"left ou right" outer join ou "left ou right" join mostrará todos os registros, dando prioridade a tabela da esquerda ou da direita do join

select gafanhotos.nome, cursos.nome, cursos.ano 
from gafanhotos left outer join cursos
on gafanhotos.cursopreferido = cursos.idcurso;		//assim ele retorna todos os gafanhotos e mostra as relações existentes e as não existentes

create table gafanhoto_assiste_curso(			//Cria a tabela adicional para relacionar os cursos que os gafanhotos assitem
	id int not null auto_increment,
	data date,
	idgafanhoto int,
	idcurso int,
	primary key (id),
	foreign key(idgafanhoto) references gafanhotos(id),
	foreign key(idcurso) references cursos(idcurso)
) default charset = utf8;

select g.nome, c.nome from gafanhotos g			//seleciona nome do gafanhoto e o nome do curso que ele assite
join gafanhoto_assiste_curso a				//une a tabela dos cursos assistidos
on g.id = a.idgafanhoto					//onde g.od é igual a.idgafanhoto
join cursos c						//une a tabela cursos
on c.idcurso = a.idcurso				//onde c.idcurso é igual a a.idcurso
order by g.nome;					//ordenado por nome do gafanhoto





